@page "/"
@using System;
@using RestSharp;
@using Newtonsoft.Json.Linq;
@using Newtonsoft.Json;
@using System.Text;
@inject IConfiguration Configuration
@inject NavigationManager Navigation
<style>

    h3 {
        text-align: center;
        color: #333;
    }

    form {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 500px;
        width: 100%;
        margin: 0 auto;
    }

        form div {
            margin-bottom: 15px;
        }

        form label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        form input[type="text"],
        form input[type="email"],
        form input[type="checkbox"] {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            box-sizing: border-box;
        }

        form button[type="submit"] {
            width: 100%;
            padding: 10px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
        }

            form button[type="submit"]:hover {
                background-color: #0056b3;
            }

    p {
        text-align: center;
        font-size: 14px;
        color: #333;
    }

</style>
<h3>Weather Report Request</h3>
<EditForm Model="@weatherRequest" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div>
            <label>Address:</label>
            <InputText @bind-Value="weatherRequest.Address" />
        </div>
        <div>
            <label>PostCode:</label>
            <InputText @bind-Value="weatherRequest.PostCode" />
        </div>
    <div>
        <label>City:</label>
        <InputText @bind-Value="weatherRequest.City" />
    </div>
    <div>
        <label>State:</label>
        <InputText @bind-Value="weatherRequest.State" />
    </div>
    <div>
        <label>Email:</label>
        <InputText @bind-Value="weatherRequest.Email" />
    </div>
    <div>
        <label>Business:</label>
        <InputText @bind-Value="weatherRequest.Business" />
    </div>
    <div>
        <label>Name:</label>
        <InputText @bind-Value="weatherRequest.Name" />
    </div>
    <div>
        <label>Weekly:</label>
        <InputCheckbox @bind-Value="weatherRequest.Weekly" />
    </div>

    <button type="submit">Submit</button>
</EditForm>
<p>@myText</p>
@code {

    string berarertoken;
    private WeatherReportRequest weatherRequest = new WeatherReportRequest("", "", "", "", "", "", "", false);
    private string myText = "Not yet submitted";
    private void HandleValidSubmit()
    {
        myText = "submitted";
        start(weatherRequest);
    }

    const string ORCHESTRATOR_URL = "https://cloud.uipath.com/rosscowie/DefaultTenant/orchestrator_";
    public void start(WeatherReportRequest wrr)
    {

        berarertoken = Configuration["BEARER_TOKEN"];

        startJob(berarertoken, wrr);
    }
    public class WeatherReportRequest
    {
        public WeatherReportRequest(string address, string postcode, string city, string state, string email, string business, string name, bool weekly)
        {
            Weekly = weekly;
            Genuine = true;
            Address = address;
            PostCode = postcode;
            City = city;
            State = state;
            Email = email;
            Name = name;
            Business = business;
        }

        public bool Weekly, Genuine;
        public string Address;
        public string PostCode;
        public string City;
        public string State;
        public string Email;
        public string Business;
        public string Name;
    }

    private async Task startJob(string bearerToken, WeatherReportRequest report)
    {
        myText = "Sending";
        try
        {
            var client = new RestClient();
            var request = new RestRequest("https://cloud.uipath.com/rosscowie/DefaultTenant/orchestrator_/t/1efae47c-61bf-4e5d-be11-4ae15d440dc7/SendWeatherReport", Method.Post);
            request.AddHeader("Authorization", bearerToken);
            request.AddHeader("Content-Type", "application/json");

            var json = JsonConvert.SerializeObject(new
            {
                report.Weekly,
                Address1 = report.Address,
                Address2 = report.PostCode,
                Address3 = report.City,
                Address4 = report.State,
                report.Name,
                BuisnessName = report.Business,
                report.Email,
                report.Genuine
            });

            request.AddJsonBody(json);

            RestResponse response = await client.ExecuteAsync(request);

            // Check if the response was successful
            if (response.IsSuccessful)
            {
                myText = response.Content;
            }
            else
            {
                myText = $"Error: {response.StatusCode} - {response.StatusDescription}";
            }
        }
        catch (HttpRequestException e)
        {
            myText = $"Request error: {e.Message}";
        }
        catch (Exception e)
        {
            myText = $"Unexpected error: {e.Message}";
        }
    }

}
